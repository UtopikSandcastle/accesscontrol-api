name: build

on:
  push:
    tags: [ 'v*.*.*' ]
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Secrets:
#   DOCKERHUB_USERNAME
#   DOCKERHUB_TOKEN
#   NPM_TOKEN

env:
  AUTHOR_NAME: Utopik Sandcastle
  AUTHOR_EMAIL: utopiksandcastle@utopiksolutions.com

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    env:
      DOCKER_REGISTRY: ${{ startsWith(github.ref, 'refs/tags/v') && 'docker.io' || 'ghcr.io' }}
      DOCKER_USERNAME: ${{ startsWith(github.ref, 'refs/tags/v') && secrets.DOCKERHUB_USERNAME || github.actor }}
      DOCKER_PASSWORD: ${{ startsWith(github.ref, 'refs/tags/v') && secrets.DOCKERHUB_TOKEN || secrets.GITHUB_TOKEN }}
      DOCKERFILE_PATH: "src/AccessControlAPI"
    outputs:
      image_tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: startsWith(github.ref, 'refs/tags/v')
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.1.1'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
           version: v0.11.2

      # Login against a Docker DOCKER_REGISTRY
      # https://github.com/docker/login-action
      - name: Log into DOCKER_REGISTRY ${{ env.DOCKER_REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      # Build and push Docker image with Buildx
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.DOCKERFILE_PATH }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
        
  openapi:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      # Extract OpenAPI Configuration File from the Docker image.
      # The file is generated in the Dockerfile and placed at the root.
      - name: Extract OpenAPI configuration file
        uses: shrink/actions-docker-extract@v3
        with:
          image: ${{ needs.docker.outputs.image_tags }}
          path: App/openapi.json
          destination: openapi.json

      # The OpenAPI Configuration File can generate multiple language packages.
      # This step store the artifact to be able to use it later.
      - name: Upload OpenAPI configuration file to artifact
        uses: actions/upload-artifact@v4.0.0
        with:
          name: openapi
          path: openapi.json
          
  openapi-typescript-angular:
    needs: openapi
    runs-on: ubuntu-latest
    steps:
      - name: Get package meta
        id: package
        run: |
          # Use the version tag, if not use the PR id or the destination branch.
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "PACKAGE_REGISTRY='https://registry.npmjs.org'" >> $GITHUB_ENV
            echo "PACKAGE_SECRET=${{ secrets.NPM_TOKEN }}" >> $GITHUB_ENV
            echo "PACKAGE_VERSION=$(echo '${{ github.ref }}' | sed 's|refs/tags/v||')" >> $GITHUB_ENV
          else
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              VERSION_SUFFIX="-pr.${{ github.event.pull_request.number }}"
            else
              VERSION_SUFFIX=$(echo "${{ github.ref }}" | sed 's|refs/heads/||' | sed 's|/|-|g')
            fi
            echo "PACKAGE_REGISTRY='https://npm.pkg.github.com'" >> $GITHUB_ENV
            echo "PACKAGE_SECRET=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
            echo "PACKAGE_VERSION=0.0.0$VERSION_SUFFIX" >> $GITHUB_ENV
          fi

          echo "PACKAGE_SCOPE=@$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "PACKAGE_NAME=${GITHUB_REPOSITORY#*/}-client" >> $GITHUB_ENV

      # Get a copy of the OpenAPI Configuration File in the local directory.
      - name: Download OpenAPI configuration file from artifact
        uses: actions/download-artifact@v4.1.0
        with:
          name: openapi
      
      # Generate a npm package for Angular library based on the OpenAPI Configuration File.
      - name: Generate Angular Client
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            openapitools/openapi-generator-cli \
              generate \
                -i /workspace/openapi.json \
                -g typescript-angular \
                -o /workspace/ \
                --additional-properties=npmName=${{ env.PACKAGE_SCOPE }}/${{ env.PACKAGE_NAME }},npmVersion=${{ env.PACKAGE_VERSION }}
      
      # Setup the requirement for npm package
      - name: Set up Node.js
        uses: actions/setup-node@v4.0.1
        with:
          node-version: 18
          registry-url: ${{ env.PACKAGE_REGISTRY }}
          scope: ${{ env.PACKAGE_SCOPE }}

      # Add information to the package configuration.
      - name: Configure package
        run: |
          jq '.repository = {"type": "git", "url": "git+https://github.com/${{ github.repository }}"}' package.json > tmp.json && mv tmp.json package.json
          jq '.author = "${{ env.AUTHOR_NAME }} <${{ env.AUTHOR_EMAIL }}>"' package.json > tmp.json && mv tmp.json package.json
      - run: cat package.json

      # Install requirement and build the package.
      - name: Build the package
        run: npm install
      - run: npm run build

      # npm cannot removed packages, but in GitHub package registry it's possible.
      # So, let remove the previou package version, and replaced by a new build.
      - name: Get the previous package id for the same package version
        if: ${{ !(startsWith(github.ref, 'refs/tags/v')) }}
        id: version_id
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const response = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
                org: context.repo.owner,
                package_name: process.env.PACKAGE_NAME,
                package_type: 'npm'
              });
              const version = response.data.find(v => v.name === process.env.PACKAGE_VERSION);
              if (version && version.id) {
                return version.id;
              } else {
                throw new Error('Version not found');
              }
            } catch (error) {
              console.error('An error occurred:', error.message);
              return 0;
            }

      # Remove previous push of that version
      - name: Delete package
        if: ${{ !(startsWith(github.ref, 'refs/tags/v')) && steps.version_id.outputs.result != '0' }}
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ env.PACKAGE_NAME }}
          package-type: 'npm'
          package-version-ids: ${{ steps.version_id.outputs.result }}

      # Publish the package.
      - name: Publish the package
        run: |
            npm publish --access public --tag latest
        env:
          NODE_AUTH_TOKEN: ${{ env.PACKAGE_SECRET }}
