name: build

on:
  push:
    tags: [ 'v*.*.*' ]
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# secrets:
#   DOCKERHUB_USERNAME
#   DOCKERHUB_TOKEN
#   NPM_TOKEN

env:
  AUTHOR_NAME: Utopik Sandcastle
  AUTHOR_EMAIL: utopiksandcastle@utopiksolutions.com

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      docker-registry: ${{ startsWith(github.ref, 'refs/tags/v') && 'docker.io' || 'ghcr.io' }}
      docker-username: ${{ startsWith(github.ref, 'refs/tags/v') && secrets.DOCKERHUB_USERNAME || github.actor }}
      dockerfile-directory: "src/AccessControlAPI"
      npm-registry: ${{ startsWith(github.ref, 'refs/tags/v') && 'https://registry.npmjs.org' || 'https://npm.pkg.github.com' }}
      npm-package-author: "${{ env.AUTHOR_NAME }} <${{ env.AUTHOR_EMAIL }}>"
      npm-package-name: ${{ env.NPM_PACKAGE_NAME }}
      npm-package-scope: ${{ env.NPM_PACKAGE_SCOPE }}
      npm-package-version: ${{ env.NPM_PACKAGE_VERSION }}
      npm-package-tag: ${{ env.NPM_PACKAGE_TAG }}
    steps:
      - name: Set outputs
        id: meta
        run: |
          echo "NPM_PACKAGE_NAME=${GITHUB_REPOSITORY#*/}-client" >> $GITHUB_ENV
          echo "NPM_PACKAGE_SCOPE=@$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

          # NPM_PACKAGE_VERSION
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "NPM_PACKAGE_VERSION=$(echo '${{ github.ref }}' | sed 's|refs/tags/v||')" >> $GITHUB_ENV
          else
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              VERSION_SUFFIX="pr.${{ github.event.pull_request.number }}"
            else
              VERSION_SUFFIX=$(basename "${{ github.ref }}")
            fi
            echo "NPM_PACKAGE_VERSION=0.0.0-$VERSION_SUFFIX" >> $GITHUB_ENV
          fi

          # NPM_PACKAGE_TAG
          # If git tag
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            TAG=$(echo '${{ github.ref }}' | sed -n 's/.*-\(.*\)\..*/\1/')
            if [[ -z "$TAG" ]]; then
              TAG='latest'
            fi
          
          # If a push to default branch
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "main" ]]; then
            TAG='latest'
          fi

          echo "NPM_PACKAGE_TAG=$TAG" >> $GITHUB_ENV

    cleanup:
      runs-on: ubuntu-latest
      uses: .github/workflows/cleanup.yml@cleanup

  # docker:
  #   needs: setup
  #   uses: UtopikGoodies/github-workflow/.github/workflows/docker.yml
  #   with:
  #     registry: ${{ needs.setup.outputs.docker-registry }}
  #     username: ${{ needs.setup.outputs.docker-username }}
  #     dockerfile-directory: ${{ needs.setup.outputs.dockerfile-directory }}
  #   secrets:
  #     password: ${{ startsWith(github.ref, 'refs/tags/v') && secrets.DOCKERHUB_TOKEN || secrets.GITHUB_TOKEN }}

  # openapi:
  #   needs: docker
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Extract OpenAPI Configuration File from the Docker image.
  #     # The file is generated in the Dockerfile and placed at the root.
  #     - name: Extract OpenAPI configuration file
  #       uses: shrink/actions-docker-extract@v3
  #       with:
  #         image: ${{ needs.docker.outputs.image-tags }}
  #         path: App/openapi.json
  #         destination: openapi.json

  #     # The OpenAPI Configuration File can generate multiple language packages.
  #     # This step store the artifact to be able to use it later.
  #     - name: Upload OpenAPI configuration file to artifact
  #       uses: actions/upload-artifact@v4.0.0
  #       with:
  #         name: openapi
  #         path: openapi.json
          
  # openapi-typescript-angular:
  #   needs: [setup, openapi]
  #   uses: UtopikGoodies/github-workflow/.github/workflows/openapi-typescript-angular.yml
  #   with:
  #     artifact-name: openapi
  #     npm-registry: ${{ needs.setup.outputs.npm-registry }}
  #     npm-package-scope: ${{ needs.setup.outputs.npm-package-scope }}
  #     npm-package-name: ${{ needs.setup.outputs.npm-package-name }}
  #     npm-package-version: ${{ needs.setup.outputs.npm-package-version }}
  #     npm-package-tag: ${{ needs.setup.outputs.npm-package-tag }}
  #     npm-package-description: "Client library for the Access Control API"
  #     npm-package-author: ${{ needs.setup.outputs.npm-package-author }}
  #     npm-package-license: "MIT"
  #   secrets:
  #     npm-registry-token: ${{ contains(needs.setup.outputs.npm-registry, 'registry.npmjs.org') && secrets.NPM_TOKEN || secrets.GITHUB_TOKEN }}
