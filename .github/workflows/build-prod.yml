name: Build Prod

on:
  push:
    tags: [ 'v*.*.*' ]
  pull_request: #TODO: Remove debug
    branches: [ "main" ]

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    env:
      DOCKER_REGISTRY: docker.io
      DOCKER_IMAGE: ${{ github.repository }}
      DOCKERFILE_PATH: "src/AccessControlAPI"
    outputs:
      image_tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.1.1'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
           version: v0.11.2

      # Login against a Docker DOCKER_REGISTRY except on PR
      # https://github.com/docker/login-action
      - name: Log into DOCKER_REGISTRY ${{ env.DOCKER_REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=pr #TODO: Debug: Remove
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      # Build and push Docker image with Buildx
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.DOCKERFILE_PATH }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

  openapi:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      # Extract OpenAPI Configuration File from the Docker image.
      # The file is generated in the Dockerfile and placed at the root.
      - name: Extract OpenAPI configuration file
        uses: shrink/actions-docker-extract@v3
        with:
          image: ${{ needs.docker.outputs.image_tags }}
          path: App/openapi.json
          destination: openapi.json

      # The OpenAPI Configuration File can generate multiple language packages.
      # This step store the artifact to be able to use it later.
      - name: Upload OpenAPI configuration file to artifact
        uses: actions/upload-artifact@v4.0.0
        with:
          name: openapi
          path: openapi.json
          
  openapi-typescript-angular:
    needs: openapi
    runs-on: ubuntu-latest
    env:
      PACKAGE_NAME: "@utopiksandcastle/accesscontrol-client"
      PACKAGE_VERSION: "${{ github.ref }}"
    steps:
      - name: Download OpenAPI configuration file from artifact
        uses: actions/download-artifact@v4.1.0
        with:
          name: openapi
      
      - name: Generate Angular Client
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            openapitools/openapi-generator-cli \
              generate \
                -i /workspace/openapi.json \
                -g typescript-angular \
                -o /workspace/ \
                --additional-properties=npmName=$PACKAGE_NAME,npmVersion=$PACKAGE_VERSION

      - name: Set up Node.js
        uses: actions/setup-node@v4.0.1
        with:
          node-version: 18
          registry-url: 'https://npm.pkg.github.com/'
          scope: '@utopiksandcastle'

      - name: Configure package
        run: |
          jq '.repository = {"type": "git", "url": "git+https://github.com/${{ github.repository }}"}' package.json > tmp.json && mv tmp.json package.json
          jq '.author = "Utopik Sandcastle <utopiksandcastle@utopiksolutions.com>"' package.json > tmp.json && mv tmp.json package.json
      - run: cat package.json

      - name: Build the package
        run: npm install
      - run: npm run build

      - name: Publish the package
        run: |
            npm publish --access public --tag latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
