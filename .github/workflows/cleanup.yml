name: Clean Up

on:
  schedule:
    - cron: '0 0 * * 0'  # Run at 00:00 on Sunday.
  pull_request:
    types: [closed]

jobs:
  delete-package-versions:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Delete Versions of Packages for Closed PRs
        uses: actions/github-script@v7
        env:
          WORKFLOW_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
        with:
          script: |
          const octokit = github.getOctokit(process.env.WORKFLOW_TOKEN);

            const org = context.repo.owner;
            const repo = context.repo.repo;

            const packageTypes = ['container', 'npm', 'maven', 'rubygems', 'docker', 'nuget'];

            async function safeApiCall(apiPromise, description) {
              try {
                const response = await apiPromise;
                console.log(`Success: ${description}`);
                return response;
              } catch (error) {
                console.error(`API Error for ${description}:`, error);
                return null;
              }
            }

            const closedPrsResponse = await safeApiCall(
              github.rest.pulls.list({
                owner: org,
                repo: repo,
                state: 'closed'
              }), 
              'Fetching closed PRs'
            );
            if (!closedPrsResponse) return;

            const closedPrNumbers = closedPrsResponse.data.map(pr => pr.number);

            for (const packageType of packageTypes) {
              console.log(`Checking package type: ${packageType}`);

              let packagesResponse;
              try {
                packagesResponse = await octokit.rest.packages.listPackagesForOrganization({
                  org: org,
                  package_type: packageType
                });
              } catch (error) {
                console.error(`Error fetching packages of type ${packageType}:`, error);
                continue;
              }

              for (const package of packagesResponse.data) {
                const packageName = package.name;
                console.log(`Checking package: ${packageName}`);

                const versionsResponse = await safeApiCall(
                  octokit.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
                    org: org,
                    package_type: packageType,
                    package_name: packageName
                  }),
                  `Fetching versions for package ${packageName}`
                );
                if (!versionsResponse) continue;

                for (const version of versionsResponse.data) {
                  console.log(`Checking version: ${version.name}`);
                  
                  // Extract the PR number from the version name
                  // This regex matches both 'pr-17' and '0.0.0-pr.17'
                  const prNumberMatch = version.name.match(/pr[.-](\d+)/);
                  if (prNumberMatch && closedPrNumbers.includes(parseInt(prNumberMatch[1]))) {
                    console.log(`Deleting package version ${version.id} of ${packageName} for closed PR #${prNumberMatch[1]}`);
                    await safeApiCall(
                      octokit.rest.packages.deletePackageVersionForOrg({
                        org: org,
                        package_type: packageType,
                        package_name: packageName,
                        package_version_id: version.id,
                      }),
                      `Deleting package version ${version.id} of ${packageName}`
                    );
                  }
                }
              }
            }